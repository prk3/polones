{"version":3,"file":"static/js/142.353c7fc4.chunk.js","mappings":"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","sources":["../../pkg/polones_web_bg.js"],"sourcesContent":["import * as wasm from './polones_web_bg.wasm';\n\nconst heap = new Array(32).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nfunction getObject(idx) { return heap[idx]; }\n\nlet heap_next = heap.length;\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nlet cachedUint8ClampedMemory0;\nfunction getUint8ClampedMemory0() {\n    if (cachedUint8ClampedMemory0.byteLength === 0) {\n        cachedUint8ClampedMemory0 = new Uint8ClampedArray(wasm.memory.buffer);\n    }\n    return cachedUint8ClampedMemory0;\n}\n\nfunction getClampedArrayU8FromWasm0(ptr, len) {\n    return getUint8ClampedMemory0().subarray(ptr / 1, ptr / 1 + len);\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nlet cachedUint8Memory0;\nfunction getUint8Memory0() {\n    if (cachedUint8Memory0.byteLength === 0) {\n        cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8Memory0;\n}\n\nconst lTextEncoder = typeof TextEncoder === 'undefined' ? (0, module.require)('util').TextEncoder : TextEncoder;\n\nlet cachedTextEncoder = new lTextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len);\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nlet cachedInt32Memory0;\nfunction getInt32Memory0() {\n    if (cachedInt32Memory0.byteLength === 0) {\n        cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachedInt32Memory0;\n}\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1);\n    getUint8Memory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n/**\n* @param {Uint8Array} rom\n* @returns {string | undefined}\n*/\nexport function polones_start(rom) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passArray8ToWasm0(rom, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.polones_start(retptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        let v1;\n        if (r0 !== 0) {\n            v1 = getStringFromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n        }\n        return v1;\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n* @param {number} times\n* @returns {string | undefined}\n*/\nexport function polones_tick(times) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.polones_tick(retptr, times);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        let v0;\n        if (r0 !== 0) {\n            v0 = getStringFromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n        }\n        return v0;\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nexport function __wbg_polonesdisplaydraw_efa3a306fe186195(arg0, arg1) {\n    var v0 = getClampedArrayU8FromWasm0(arg0, arg1).slice();\n    wasm.__wbindgen_free(arg0, arg1 * 1);\n    polones_display_draw(v0);\n};\n\nexport function __wbg_polonesinputreadport1_9b4bbf14df6c4298(arg0) {\n    const ret = polones_input_read_port_1();\n    const ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nexport function __wbg_polonesinputreadport2_bc59586957cbf4c9(arg0) {\n    const ret = polones_input_read_port_2();\n    const ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nexport function __wbg_new_693216e109162396() {\n    const ret = new Error();\n    return addHeapObject(ret);\n};\n\nexport function __wbg_stack_0ddaca5d1abfb52f(arg0, arg1) {\n    const ret = getObject(arg1).stack;\n    const ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nexport function __wbg_error_09919627ac0992f5(arg0, arg1) {\n    try {\n        console.error(getStringFromWasm0(arg0, arg1));\n    } finally {\n        wasm.__wbindgen_free(arg0, arg1);\n    }\n};\n\nexport function __wbindgen_object_drop_ref(arg0) {\n    takeObject(arg0);\n};\n\ncachedInt32Memory0 = new Int32Array(wasm.memory.buffer);\ncachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);\ncachedUint8ClampedMemory0 = new Uint8ClampedArray(wasm.memory.buffer);\n\n"],"names":["heap","Array","fill","undefined","getObject","idx","push","cachedUint8ClampedMemory0","heap_next","length","takeObject","ret","dropObject","getClampedArrayU8FromWasm0","ptr","len","byteLength","Uint8ClampedArray","wasm","subarray","cachedUint8Memory0","WASM_VECTOR_LEN","getUint8Memory0","Uint8Array","cachedInt32Memory0","cachedTextEncoder","TextEncoder","module","require","encodeString","encodeInto","arg","view","buf","encode","set","read","written","passStringToWasm0","malloc","realloc","mem","offset","code","charCodeAt","slice","getInt32Memory0","Int32Array","cachedTextDecoder","TextDecoder","ignoreBOM","fatal","getStringFromWasm0","decode","polones_start","rom","retptr","ptr0","passArray8ToWasm0","len0","v1","r0","r1","polones_tick","times","v0","__wbg_polonesdisplaydraw_efa3a306fe186195","arg0","arg1","polones_display_draw","__wbg_polonesinputreadport1_9b4bbf14df6c4298","polones_input_read_port_1","__wbg_polonesinputreadport2_bc59586957cbf4c9","polones_input_read_port_2","__wbg_new_693216e109162396","obj","addHeapObject","Error","__wbg_stack_0ddaca5d1abfb52f","stack","__wbg_error_09919627ac0992f5","console","error","__wbindgen_object_drop_ref"],"sourceRoot":""}